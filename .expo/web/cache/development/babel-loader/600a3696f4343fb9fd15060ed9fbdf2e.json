{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hassao03/code/src/screens/ChatScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport { Container, Button, Text, Icon, Left, Right, Header, Title, Body } from 'native-base';\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { createChat } from \"../graphql/mutations\";\nimport { onCreateChat } from \"../graphql/subscriptions\";\nimport { useNavigation } from '@react-navigation/native';\nexport default function ChatScreen(props) {\n  var event = props.route.params.event;\n  var navigation = useNavigation();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentUser = _useState2[0],\n      setCurrentUser = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      messages = _useState4[0],\n      setMessages = _useState4[1];\n\n  var getChatsByEventQuery = \"query GetEvent(\\n    $id: ID!\\n    $nextToken: String\\n    $limit: Int\\n  ) {\\n    getEvent(id: $id) {\\n      id\\n      chats (\\n        limit: $limit\\n        sortDirection: DESC\\n        nextToken: $nextToken\\n      ) {\\n        items  {\\n          id\\n          content\\n          createdAt\\n          user {\\n            id\\n            name\\n          }\\n        }\\n        nextToken\\n      }\\n    }\\n  }\\n  \";\n\n  var _onSend = function onSend() {\n    var newMessages = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    setMessages(GiftedChat.append(messages, newMessages));\n    createEventChat(event.id, currentUser.attributes.sub, newMessages[0].text);\n  };\n\n  var renderChat = function renderChat() {\n    if (currentUser) return React.createElement(GiftedChat, {\n      messages: messages,\n      onSend: function onSend(newMessages) {\n        return _onSend(newMessages);\n      },\n      user: {\n        _id: currentUser.attributes.sub,\n        name: currentUser.attributes.given_name ? currentUser.attributes.given_name + \" \" + currentUser.attributes.family_name : currentUser.username\n      },\n      inverted: true,\n      placeholder: \"Type a message...\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    });\n    return React.createElement(Text, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  };\n\n  function authUser() {\n    var cognitoUser;\n    return _regeneratorRuntime.async(function authUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n          case 2:\n            cognitoUser = _context.sent;\n\n            if (cognitoUser) {\n              setCurrentUser(cognitoUser);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  useEffect(function () {\n    var getChatsByEventId = function getChatsByEventId() {\n      var input, result, existingMessages;\n      return _regeneratorRuntime.async(function getChatsByEventId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              input = {\n                id: event.id,\n                nextToken: null,\n                limit: 20\n              };\n              _context2.prev = 1;\n              _context2.next = 4;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getChatsByEventQuery, input)));\n\n            case 4:\n              result = _context2.sent;\n              existingMessages = result.data.getEvent.chats.items;\n              setMessages(existingMessages.map(function (item) {\n                return formatMessage(item);\n              }));\n              _context2.next = 12;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(_context2.t0);\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 9]], Promise);\n    };\n\n    getChatsByEventId();\n  }, [setMessages]);\n  useEffect(function () {\n    authUser();\n    var subscription = API.graphql(graphqlOperation(onCreateChat)).subscribe({\n      next: function next(response) {\n        var newMessageFromResponse = response.value.data.onCreateChat;\n\n        if (newMessageFromResponse.event.id === event.id && newMessageFromResponse.user.id !== currentUser.attributes.sub) {\n          setMessages(GiftedChat.append(messages, formatMessage(newMessageFromResponse)));\n        }\n      },\n      error: function error(_error) {\n        console.error(_error);\n      }\n    });\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, React.createElement(Left, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, React.createElement(Icon, {\n    name: \"ios-arrow-back\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, \"Back\"))), React.createElement(Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  }, \"Live Chat\"))), React.createElement(Right, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 9\n    }\n  })), renderChat());\n}\n\nChatScreen.navigationOptions = function (_ref) {\n  var navigation = _ref.navigation;\n  return {\n    headerTitle: 'Live Chat'\n  };\n};\n\nfunction createEventChat(eventId, userId, newMessage) {\n  var input, result;\n  return _regeneratorRuntime.async(function createEventChat$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          input = {\n            input: {\n              chatUserId: userId,\n              chatEventId: eventId,\n              content: newMessage\n            }\n          };\n          result = null;\n          _context3.prev = 2;\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createChat, input)));\n\n        case 5:\n          result = _context3.sent;\n          _context3.next = 11;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](2);\n          console.log(_context3.t0);\n\n        case 11:\n          return _context3.abrupt(\"return\", result);\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n}\n\nfunction formatMessage(item) {\n  return {\n    _id: item.id,\n    text: item.content,\n    createdAt: item.createdAt,\n    user: {\n      _id: item.user.id,\n      name: item.user.name,\n      avatar: ''\n    }\n  };\n}","map":{"version":3,"sources":["/Users/hassao03/code/src/screens/ChatScreen.js"],"names":["React","useEffect","useState","GiftedChat","Container","Button","Text","Icon","Left","Right","Header","Title","Body","API","graphqlOperation","Auth","createChat","onCreateChat","useNavigation","ChatScreen","props","event","route","params","navigation","currentUser","setCurrentUser","messages","setMessages","getChatsByEventQuery","onSend","newMessages","append","createEventChat","id","attributes","sub","text","renderChat","_id","name","given_name","family_name","username","authUser","currentAuthenticatedUser","cognitoUser","getChatsByEventId","input","nextToken","limit","graphql","result","existingMessages","data","getEvent","chats","items","map","item","formatMessage","console","log","subscription","subscribe","next","response","newMessageFromResponse","value","user","error","unsubscribe","goBack","navigationOptions","headerTitle","eventId","userId","newMessage","chatUserId","chatEventId","content","createdAt","avatar"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { GiftedChat } from 'react-native-gifted-chat';\nimport {\n  Container,\n  Button,\n  Text,\n  Icon,\n  Left,\n  Right,\n  Header,\n  Title,\n  Body,\n} from 'native-base';\n\nimport { API, graphqlOperation, Auth } from 'aws-amplify';\nimport { createChat } from '../graphql/mutations';\nimport { onCreateChat } from '../graphql/subscriptions';\nimport { useNavigation } from '@react-navigation/native';\n\nexport default function ChatScreen(props) {\n  let { event } = props.route.params;\n  const navigation = useNavigation();\n  let [currentUser, setCurrentUser] = useState(null);\n  const [messages, setMessages] = useState([]);\n  const getChatsByEventQuery = `query GetEvent(\n    $id: ID!\n    $nextToken: String\n    $limit: Int\n  ) {\n    getEvent(id: $id) {\n      id\n      chats (\n        limit: $limit\n        sortDirection: DESC\n        nextToken: $nextToken\n      ) {\n        items  {\n          id\n          content\n          createdAt\n          user {\n            id\n            name\n          }\n        }\n        nextToken\n      }\n    }\n  }\n  `;\n\n  const onSend = (newMessages = []) => {\n    setMessages(GiftedChat.append(messages, newMessages));\n    createEventChat(event.id, currentUser.attributes.sub, newMessages[0].text);\n  };\n\n  const renderChat = () => {\n    if (currentUser)\n      return (\n        <GiftedChat\n          messages={messages}\n          onSend={(newMessages) => onSend(newMessages)}\n          user={{\n            _id: currentUser.attributes.sub,\n            name: currentUser.attributes.given_name\n              ? `${currentUser.attributes.given_name} ${currentUser.attributes.family_name}`\n              : currentUser.username,\n          }}\n          inverted={true}\n          placeholder='Type a message...'\n        />\n      );\n    return <Text>Loading...</Text>;\n  };\n\n  async function authUser() {\n    const cognitoUser = await Auth.currentAuthenticatedUser();\n    if (cognitoUser) {\n      setCurrentUser(cognitoUser);\n    }\n  }\n\n  useEffect(() => {\n    const getChatsByEventId = async () => {\n      const input = {\n        id: event.id,\n        nextToken: null,\n        limit: 20,\n      };\n\n      try {\n        const result = await API.graphql(\n          graphqlOperation(getChatsByEventQuery, input)\n        );\n        const existingMessages = result.data.getEvent.chats.items;\n        setMessages(\n          existingMessages.map((item) => {\n            return formatMessage(item);\n          })\n        );\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    getChatsByEventId();\n  }, [setMessages]);\n\n  useEffect(() => {\n    authUser();\n    const subscription = API.graphql(graphqlOperation(onCreateChat)).subscribe({\n      next: (response) => {\n        let newMessageFromResponse = response.value.data.onCreateChat;\n        if (\n          newMessageFromResponse.event.id === event.id &&\n          newMessageFromResponse.user.id !== currentUser.attributes.sub\n        ) {\n          setMessages(\n            GiftedChat.append(messages, formatMessage(newMessageFromResponse))\n          );\n        }\n      },\n      error: (error) => {\n        console.error(error);\n      },\n    });\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [messages]);\n\n  return (\n    <Container>\n      <Header>\n        <Left>\n          <Button transparent onPress={() => navigation.goBack()}>\n            <Icon name='ios-arrow-back'></Icon>\n            <Text>Back</Text>\n          </Button>\n        </Left>\n        <Body>\n          <Title>\n            <Text>Live Chat</Text>\n          </Title>\n        </Body>\n        <Right />\n      </Header>\n      {renderChat()}\n    </Container>\n  );\n}\n\nChatScreen.navigationOptions = ({ navigation }) => ({\n  headerTitle: 'Live Chat',\n});\n\nasync function createEventChat(eventId, userId, newMessage) {\n  const input = {\n    input: {\n      chatUserId: userId,\n      chatEventId: eventId,\n      content: newMessage,\n    },\n  };\n  let result = null;\n  try {\n    result = await API.graphql(graphqlOperation(createChat, input));\n  } catch (e) {\n    console.log(e);\n  }\n\n  return result;\n}\n\nfunction formatMessage(item) {\n  return {\n    _id: item.id,\n    text: item.content,\n    createdAt: item.createdAt,\n    user: {\n      _id: item.user.id,\n      name: item.user.name,\n      avatar: '',\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}