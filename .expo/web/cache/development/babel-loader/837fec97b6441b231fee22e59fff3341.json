{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hassao03/code/node_modules/react-native-elements/src/checkbox/CheckBox.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport TextElement from \"../text/Text\";\nimport fonts from \"../config/fonts\";\nimport colors from \"../config/colors\";\nimport FAIcon from \"@expo/vector-icons/FontAwesome\";\nimport getIconType from \"../helpers/getIconType\";\nimport ViewPropTypes from \"../config/ViewPropTypes\";\n\nvar CheckBox = function CheckBox(props) {\n  var component = props.component,\n      checked = props.checked,\n      iconRight = props.iconRight,\n      title = props.title,\n      center = props.center,\n      right = props.right,\n      containerStyle = props.containerStyle,\n      textStyle = props.textStyle,\n      onPress = props.onPress,\n      onLongPress = props.onLongPress,\n      onIconPress = props.onIconPress,\n      onLongIconPress = props.onLongIconPress,\n      size = props.size,\n      checkedIcon = props.checkedIcon,\n      uncheckedIcon = props.uncheckedIcon,\n      iconType = props.iconType,\n      checkedColor = props.checkedColor,\n      uncheckedColor = props.uncheckedColor,\n      checkedTitle = props.checkedTitle,\n      fontFamily = props.fontFamily,\n      attributes = _objectWithoutProperties(props, [\"component\", \"checked\", \"iconRight\", \"title\", \"center\", \"right\", \"containerStyle\", \"textStyle\", \"onPress\", \"onLongPress\", \"onIconPress\", \"onLongIconPress\", \"size\", \"checkedIcon\", \"uncheckedIcon\", \"iconType\", \"checkedColor\", \"uncheckedColor\", \"checkedTitle\", \"fontFamily\"]);\n\n  var Icon = FAIcon;\n\n  if (iconType) {\n    Icon = getIconType(iconType);\n  }\n\n  var Component = component || TouchableOpacity;\n  var iconName = uncheckedIcon;\n\n  if (checked) {\n    iconName = checkedIcon;\n  }\n\n  return React.createElement(Component, _extends({}, attributes, {\n    onLongPress: onLongPress,\n    onPress: onPress,\n    style: [styles.container, containerStyle && containerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }), React.createElement(View, {\n    style: [styles.wrapper, right && {\n      justifyContent: 'flex-end'\n    }, center && {\n      justifyContent: 'center'\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, !iconRight && React.createElement(Icon, {\n    color: checked ? checkedColor : uncheckedColor,\n    name: iconName,\n    size: size || 24,\n    onLongPress: onLongIconPress,\n    onPress: onIconPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), React.isValidElement(title) ? title : React.createElement(TextElement, {\n    style: [styles.text, textStyle && textStyle, fontFamily && {\n      fontFamily: fontFamily\n    }],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, checked ? checkedTitle || title : title), iconRight && React.createElement(Icon, {\n    color: checked ? checkedColor : uncheckedColor,\n    name: iconName,\n    size: size || 24,\n    onLongPress: onLongIconPress,\n    onPress: onIconPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  })));\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  checkedColor: 'green',\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24\n};\nCheckBox.propTypes = {\n  component: PropTypes.any,\n  checked: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedIcon: PropTypes.string,\n  uncheckedIcon: PropTypes.string,\n  iconType: PropTypes.string,\n  size: PropTypes.number,\n  checkedColor: PropTypes.string,\n  uncheckedColor: PropTypes.string,\n  checkedTitle: PropTypes.string,\n  onIconPress: PropTypes.func,\n  onLongIconPress: PropTypes.func,\n  fontFamily: PropTypes.string\n};\nvar styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 3\n  },\n  text: _objectSpread({\n    marginLeft: 10,\n    marginRight: 10,\n    color: colors.grey1\n  }, Platform.select({\n    ios: {\n      fontWeight: 'bold'\n    },\n    android: _objectSpread({}, fonts.android.bold)\n  }))\n});\nexport default CheckBox;","map":{"version":3,"sources":["/Users/hassao03/code/node_modules/react-native-elements/src/checkbox/CheckBox.js"],"names":["PropTypes","React","TextElement","fonts","colors","FAIcon","getIconType","ViewPropTypes","CheckBox","props","component","checked","iconRight","title","center","right","containerStyle","textStyle","onPress","onLongPress","onIconPress","onLongIconPress","size","checkedIcon","uncheckedIcon","iconType","checkedColor","uncheckedColor","checkedTitle","fontFamily","attributes","Icon","Component","TouchableOpacity","iconName","styles","container","wrapper","justifyContent","isValidElement","text","defaultProps","propTypes","any","bool","oneOfType","string","element","style","NativeText","func","number","StyleSheet","create","flexDirection","alignItems","margin","marginLeft","marginRight","backgroundColor","borderColor","borderWidth","padding","borderRadius","color","grey1","Platform","select","ios","fontWeight","android","bold"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  StyleSheet,\n  TouchableOpacity,\n  View,\n  Platform,\n  Text as NativeText,\n} from 'react-native';\nimport TextElement from '../text/Text';\nimport fonts from '../config/fonts';\nimport colors from '../config/colors';\nimport FAIcon from 'react-native-vector-icons/FontAwesome';\nimport getIconType from '../helpers/getIconType';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst CheckBox = props => {\n  const {\n    component,\n    checked,\n    iconRight,\n    title,\n    center,\n    right,\n    containerStyle,\n    textStyle,\n    onPress,\n    onLongPress,\n    onIconPress,\n    onLongIconPress,\n    size,\n    checkedIcon,\n    uncheckedIcon,\n    iconType,\n    checkedColor,\n    uncheckedColor,\n    checkedTitle,\n    fontFamily,\n    ...attributes\n  } = props;\n\n  let Icon = FAIcon;\n  if (iconType) {\n    Icon = getIconType(iconType);\n  }\n  const Component = component || TouchableOpacity;\n  let iconName = uncheckedIcon;\n  if (checked) {\n    iconName = checkedIcon;\n  }\n  return (\n    <Component\n      {...attributes}\n      onLongPress={onLongPress}\n      onPress={onPress}\n      style={[styles.container, containerStyle && containerStyle]}\n    >\n      <View\n        style={[\n          styles.wrapper,\n          right && { justifyContent: 'flex-end' },\n          center && { justifyContent: 'center' },\n        ]}\n      >\n        {!iconRight &&\n          <Icon\n            color={checked ? checkedColor : uncheckedColor}\n            name={iconName}\n            size={size || 24}\n            onLongPress={onLongIconPress}\n            onPress={onIconPress}\n          />}\n\n        {React.isValidElement(title)\n          ? title\n          : <TextElement\n              style={[\n                styles.text,\n                textStyle && textStyle,\n                fontFamily && { fontFamily },\n              ]}\n            >\n              {checked ? checkedTitle || title : title}\n            </TextElement>}\n\n        {iconRight &&\n          <Icon\n            color={checked ? checkedColor : uncheckedColor}\n            name={iconName}\n            size={size || 24}\n            onLongPress={onLongIconPress}\n            onPress={onIconPress}\n          />}\n      </View>\n    </Component>\n  );\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  checkedColor: 'green',\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o',\n  size: 24,\n};\n\nCheckBox.propTypes = {\n  component: PropTypes.any,\n  checked: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.element]),\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  checkedIcon: PropTypes.string,\n  uncheckedIcon: PropTypes.string,\n  iconType: PropTypes.string,\n  size: PropTypes.number,\n  checkedColor: PropTypes.string,\n  uncheckedColor: PropTypes.string,\n  checkedTitle: PropTypes.string,\n  onIconPress: PropTypes.func,\n  onLongIconPress: PropTypes.func,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 3,\n  },\n  text: {\n    marginLeft: 10,\n    marginRight: 10,\n    color: colors.grey1,\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold',\n      },\n      android: {\n        ...fonts.android.bold,\n      },\n    }),\n  },\n});\n\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}