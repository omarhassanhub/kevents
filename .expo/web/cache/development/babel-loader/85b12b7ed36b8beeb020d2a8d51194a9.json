{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/hassao03/code/node_modules/react-native-elements/src/slider/Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport ViewPropTypes from \"../config/ViewPropTypes\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nfunction Rect(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\nRect.prototype.containsPoint = function (x, y) {\n  return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n};\n\nvar Slider = function (_Component) {\n  _inherits(Slider, _Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(props.value)\n    };\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),\n        onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),\n        onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n        onPanResponderMove: this.handlePanResponderMove.bind(this),\n        onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n        onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),\n        onPanResponderTerminate: this.handlePanResponderEnd.bind(this)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var newValue = nextProps.value;\n\n      if (this.props.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(e) {\n      var nativeEvent = e.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      return this.thumbHitTest(e);\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var state = this.state;\n      var props = this.props;\n      var size = {};\n\n      if (state.allMeasured === true) {\n        size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n        size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n          width = _this$getTouchOverflo.width,\n          height = _this$getTouchOverflo.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          width = _x$nativeEvent$layout.width,\n          height = _x$nativeEvent$layout.height;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      this[storeName] = size;\n\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"measureContainer\",\n    value: function measureContainer(x) {\n      this.handleMeasure('containerSize', x);\n    }\n  }, {\n    key: \"measureTrack\",\n    value: function measureTrack(x) {\n      this.handleMeasure('trackSize', x);\n    }\n  }, {\n    key: \"measureThumb\",\n    value: function measureThumb(x) {\n      this.handleMeasure('thumbSize', x);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n      var ratio = thumbLeft / length;\n\n      if (this.props.step) {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n      } else {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n      }\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var state = this.state;\n      var props = this.props;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return React.createElement(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minimumValue = _this$props.minimumValue,\n          maximumValue = _this$props.maximumValue,\n          minimumTrackTintColor = _this$props.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props.maximumTrackTintColor,\n          thumbTintColor = _this$props.thumbTintColor,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          trackStyle = _this$props.trackStyle,\n          thumbStyle = _this$props.thumbStyle,\n          debugTouchArea = _this$props.debugTouchArea,\n          orientation = _this$props.orientation,\n          other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"orientation\"]);\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          containerSize = _this$state.containerSize,\n          trackSize = _this$state.trackSize,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var thumbLeft = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.opacity = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread({\n        position: 'absolute',\n        width: Animated.add(thumbLeft, thumbSize.width / 2),\n        marginTop: -trackSize.height,\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return React.createElement(View, _extends({}, other, {\n        style: [mainStyles.container, orientation === 'vertical' && {\n          transform: [{\n            rotate: '90deg'\n          }]\n        }, style],\n        onLayout: this.measureContainer.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: [{\n          backgroundColor: maximumTrackTintColor\n        }, mainStyles.track, trackStyle],\n        onLayout: this.measureTrack.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: [mainStyles.track, trackStyle, minimumTrackStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        onLayout: this.measureThumb.bind(this),\n        style: [{\n          backgroundColor: thumbTintColor\n        }, mainStyles.thumb, thumbStyle, _objectSpread({\n          transform: [{\n            translateX: thumbLeft\n          }, {\n            translateY: -(trackSize.height + thumbSize.height) / 2\n          }]\n        }, valueVisibleStyle)],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 9\n        }\n      }), React.createElement(View, _extends({\n        style: [styles.touchArea, touchOverflowStyle]\n      }, this.panResponder.panHandlers, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)));\n    }\n  }]);\n\n  return Slider;\n}(Component);\n\nexport { Slider as default };\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: ViewPropTypes.style,\n  trackStyle: ViewPropTypes.style,\n  thumbStyle: ViewPropTypes.style,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});","map":{"version":3,"sources":["/Users/hassao03/code/node_modules/react-native-elements/src/slider/Slider.js"],"names":["PropTypes","React","Component","ViewPropTypes","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","Rect","x","y","width","height","prototype","containsPoint","Slider","props","state","containerSize","trackSize","thumbSize","allMeasured","value","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","e","gestureState","disabled","getValue","nativeEvent","thumbTouchRect","getThumbTouchRect","locationX","locationY","thumbHitTest","event","size","Math","max","thumbTouchSize","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","handleMeasure","length","thumbLeft","orientation","dy","dx","ratio","step","minimumValue","min","maximumValue","round","__getValue","getRatio","touchOverflowSize","positionStyle","left","top","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","other","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","getTouchOverflowStyle","container","transform","rotate","measureContainer","track","measureTrack","measureThumb","thumb","translateX","translateY","touchArea","panHandlers","renderDebugThumbTouchRect","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOf","object","defaultProps","StyleSheet","justifyContent","borderRadius","right","bottom","debugThumbTouchArea"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\n// import shallowCompare from 'react-addons-shallow-compare';\n// import styleEqual from 'style-equal'\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nfunction Rect(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\nRect.prototype.containsPoint = function(x, y) {\n  return (\n    x >= this.x &&\n    y >= this.y &&\n    x <= this.x + this.width &&\n    y <= this.y + this.height\n  );\n};\n\nexport default class Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(props.value),\n    };\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   // We don't want to re-render in the following cases:\n  //   // - when only the 'value' prop changes as it's already handled with the Animated.Value\n  //   // - when the event handlers change (rendering doesn't depend on them)\n  //   // - when the style props haven't actually change\n  //\n  //   return shallowCompare(\n  //     { props: this._getPropsForComponentUpdate(this.props), state: this.state },\n  //     this._getPropsForComponentUpdate(nextProps),\n  //     nextState\n  //   ) || !styleEqual(this.props.style, nextProps.style)\n  //     || !styleEqual(this.props.trackStyle, nextProps.trackStyle)\n  //     || !styleEqual(this.props.thumbStyle, nextProps.thumbStyle);\n  // }\n  //\n  // _getPropsForComponentUpdate(props) {\n  //   var {\n  //     value,\n  //     onValueChange,\n  //     onSlidingStart,\n  //     onSlidingComplete,\n  //     style,\n  //     trackStyle,\n  //     thumbStyle,\n  //     ...otherProps,\n  //   } = props;\n  //\n  //   return otherProps;\n  // }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(e) {\n    var nativeEvent = e.nativeEvent;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /*gestureState: Object*/) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var state = this.state;\n    var props = this.props;\n\n    var size = {};\n    if (state.allMeasured === true) {\n      size.width = Math.max(\n        0,\n        props.thumbTouchSize.width - state.thumbSize.width\n      );\n      size.height = Math.max(\n        0,\n        props.thumbTouchSize.height - state.containerSize.height\n      );\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var { width, height } = this.getTouchOverflowSize();\n\n    var touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    var { width, height } = x.nativeEvent.layout;\n    var size = { width: width, height: height };\n\n    var storeName = `_${name}`;\n    var currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer(x) {\n    this.handleMeasure('containerSize', x);\n  }\n\n  measureTrack(x) {\n    this.handleMeasure('trackSize', x);\n  }\n\n  measureThumb(x) {\n    this.handleMeasure('thumbSize', x);\n  }\n\n  getValue(gestureState) {\n    var length = this.state.containerSize.width - this.state.thumbSize.width;\n    var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n\n    var ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              ratio *\n                (this.props.maximumValue - this.props.minimumValue) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    } else {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\n            this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    var ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    var state = this.state;\n    var props = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbLeft(this.getCurrentValue()) +\n        (state.thumbSize.width - props.thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (state.containerSize.height - props.thumbTouchSize.height) / 2,\n      props.thumbTouchSize.width,\n      props.thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    var {\n      value,\n      containerSize,\n      trackSize,\n      thumbSize,\n      allMeasured,\n    } = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbLeft = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      //extrapolate: 'clamp',\n    });\n\n    var valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.opacity = 0;\n    }\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width: Animated.add(thumbLeft, thumbSize.width / 2),\n      marginTop: -trackSize.height,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={[\n          mainStyles.container,\n          orientation === 'vertical' && { transform: [{ rotate: '90deg' }] },\n          style,\n        ]}\n        onLayout={this.measureContainer.bind(this)}\n      >\n        <View\n          style={[\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            trackStyle,\n          ]}\n          onLayout={this.measureTrack.bind(this)}\n        />\n        <Animated.View\n          style={[mainStyles.track, trackStyle, minimumTrackStyle]}\n        />\n        <Animated.View\n          onLayout={this.measureThumb.bind(this)}\n          style={[\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: [\n                { translateX: thumbLeft },\n                { translateY: -(trackSize.height + thumbSize.height) / 2 },\n              ],\n              ...valueVisibleStyle,\n            },\n          ]}\n        />\n        <View\n          style={[styles.touchArea, touchOverflowStyle]}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n  * Set to true to animate values with default 'timing' animation type\n  */\n  animateTransitions: PropTypes.bool,\n\n  /**\n  * Custom Animation type. 'spring' or 'timing'.\n  */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  \n  /**\n  * Choose the orientation. 'horizontal' or 'vertical'.\n  */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  \n      \n  /**\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n  */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}