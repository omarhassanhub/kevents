{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/hassao03/code/node_modules/react-native-elements/src/buttons/ButtonGroup.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport colors from \"../config/colors\";\nimport Text from \"../text/Text\";\nimport normalize from \"../helpers/normalizeText\";\nimport ViewPropTypes from \"../config/ViewPropTypes\";\n\nvar ButtonGroup = function ButtonGroup(props) {\n  var component = props.component,\n      buttons = props.buttons,\n      onPress = props.onPress,\n      selectedIndex = props.selectedIndex,\n      containerStyle = props.containerStyle,\n      innerBorderStyle = props.innerBorderStyle,\n      lastBorderStyle = props.lastBorderStyle,\n      buttonStyle = props.buttonStyle,\n      textStyle = props.textStyle,\n      selectedTextStyle = props.selectedTextStyle,\n      selectedButtonStyle = props.selectedButtonStyle,\n      underlayColor = props.underlayColor,\n      activeOpacity = props.activeOpacity,\n      onHideUnderlay = props.onHideUnderlay,\n      onShowUnderlay = props.onShowUnderlay,\n      setOpacityTo = props.setOpacityTo,\n      containerBorderRadius = props.containerBorderRadius,\n      disableSelected = props.disableSelected,\n      attributes = _objectWithoutProperties(props, [\"component\", \"buttons\", \"onPress\", \"selectedIndex\", \"containerStyle\", \"innerBorderStyle\", \"lastBorderStyle\", \"buttonStyle\", \"textStyle\", \"selectedTextStyle\", \"selectedButtonStyle\", \"underlayColor\", \"activeOpacity\", \"onHideUnderlay\", \"onShowUnderlay\", \"setOpacityTo\", \"containerBorderRadius\", \"disableSelected\"]);\n\n  var Component = component || TouchableHighlight;\n  return React.createElement(View, _extends({}, attributes, {\n    style: [styles.container, containerStyle && containerStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }), buttons.map(function (button, i) {\n    var containerRadius = !isNaN(containerBorderRadius) ? containerBorderRadius : 3;\n    return React.createElement(Component, {\n      activeOpacity: activeOpacity,\n      setOpacityTo: setOpacityTo,\n      onHideUnderlay: onHideUnderlay,\n      onShowUnderlay: onShowUnderlay,\n      underlayColor: underlayColor || '#ffffff',\n      disabled: disableSelected && i === selectedIndex ? true : false,\n      onPress: onPress ? function () {\n        return onPress(i);\n      } : function () {},\n      key: i,\n      style: [styles.button, i < buttons.length - 1 && {\n        borderRightWidth: i === 0 ? 0 : innerBorderStyle && innerBorderStyle.width || 1,\n        borderRightColor: innerBorderStyle && innerBorderStyle.color || colors.grey4\n      }, i === 1 && {\n        borderLeftWidth: innerBorderStyle && innerBorderStyle.width || 1,\n        borderLeftColor: innerBorderStyle && innerBorderStyle.color || colors.grey4\n      }, i === buttons.length - 1 && _objectSpread({}, lastBorderStyle, {\n        borderTopRightRadius: containerRadius,\n        borderBottomRightRadius: containerRadius\n      }), i === 0 && {\n        borderTopLeftRadius: containerRadius,\n        borderBottomLeftRadius: containerRadius\n      }, selectedIndex === i && {\n        backgroundColor: 'white'\n      }],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }, React.createElement(View, {\n      style: [styles.textContainer, buttonStyle && buttonStyle, selectedIndex === i && selectedButtonStyle && selectedButtonStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, button.element ? React.createElement(button.element, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }) : React.createElement(Text, {\n      style: [styles.buttonText, textStyle && textStyle, selectedIndex === i && {\n        color: colors.grey1\n      }, selectedIndex === i && selectedTextStyle],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }\n    }, button)));\n  }));\n};\n\nvar styles = StyleSheet.create({\n  button: {\n    flex: 1\n  },\n  textContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    marginBottom: 5,\n    marginTop: 5,\n    borderColor: '#e3e3e3',\n    borderWidth: 1,\n    flexDirection: 'row',\n    borderRadius: 3,\n    overflow: 'hidden',\n    backgroundColor: '#f5f5f5',\n    height: 40\n  },\n  buttonText: _objectSpread({\n    fontSize: normalize(13),\n    color: colors.grey2\n  }, Platform.select({\n    ios: {\n      fontWeight: '500'\n    }\n  }))\n});\nButtonGroup.propTypes = {\n  button: PropTypes.object,\n  component: PropTypes.any,\n  onPress: PropTypes.func,\n  buttons: PropTypes.array,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  selectedTextStyle: NativeText.propTypes.style,\n  selectedButtonStyle: ViewPropTypes.style,\n  underlayColor: PropTypes.string,\n  selectedIndex: PropTypes.number,\n  activeOpacity: PropTypes.number,\n  onHideUnderlay: PropTypes.func,\n  onShowUnderlay: PropTypes.func,\n  setOpacityTo: PropTypes.any,\n  innerBorderStyle: PropTypes.shape({\n    color: PropTypes.string,\n    width: PropTypes.number\n  }),\n  lastBorderStyle: PropTypes.oneOfType([ViewPropTypes.style, NativeText.propTypes.style]),\n  buttonStyle: ViewPropTypes.style,\n  containerBorderRadius: PropTypes.number,\n  disableSelected: PropTypes.bool\n};\nexport default ButtonGroup;","map":{"version":3,"sources":["/Users/hassao03/code/node_modules/react-native-elements/src/buttons/ButtonGroup.js"],"names":["PropTypes","React","colors","Text","normalize","ViewPropTypes","ButtonGroup","props","component","buttons","onPress","selectedIndex","containerStyle","innerBorderStyle","lastBorderStyle","buttonStyle","textStyle","selectedTextStyle","selectedButtonStyle","underlayColor","activeOpacity","onHideUnderlay","onShowUnderlay","setOpacityTo","containerBorderRadius","disableSelected","attributes","Component","TouchableHighlight","styles","container","map","button","i","containerRadius","isNaN","length","borderRightWidth","width","borderRightColor","color","grey4","borderLeftWidth","borderLeftColor","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","backgroundColor","textContainer","element","buttonText","grey1","StyleSheet","create","flex","justifyContent","alignItems","marginLeft","marginRight","marginBottom","marginTop","borderColor","borderWidth","flexDirection","borderRadius","overflow","height","fontSize","grey2","Platform","select","ios","fontWeight","propTypes","object","any","func","array","style","NativeText","string","number","shape","oneOfType","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  View,\n  Text as NativeText,\n  StyleSheet,\n  TouchableHighlight,\n  Platform,\n} from 'react-native';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport normalize from '../helpers/normalizeText';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst ButtonGroup = props => {\n  const {\n    component,\n    buttons,\n    onPress,\n    selectedIndex,\n    containerStyle,\n    innerBorderStyle,\n    lastBorderStyle,\n    buttonStyle,\n    textStyle,\n    selectedTextStyle,\n    selectedButtonStyle,\n    underlayColor,\n    activeOpacity,\n    onHideUnderlay,\n    onShowUnderlay,\n    setOpacityTo,\n    containerBorderRadius,\n    disableSelected,\n    ...attributes\n  } = props;\n\n  const Component = component || TouchableHighlight;\n  return (\n    <View\n      {...attributes}\n      style={[styles.container, containerStyle && containerStyle]}\n    >\n      {buttons.map((button, i) => {\n        const containerRadius = !isNaN(containerBorderRadius)\n          ? containerBorderRadius\n          : 3;\n        return (\n          <Component\n            activeOpacity={activeOpacity}\n            setOpacityTo={setOpacityTo}\n            onHideUnderlay={onHideUnderlay}\n            onShowUnderlay={onShowUnderlay}\n            underlayColor={underlayColor || '#ffffff'}\n            disabled={disableSelected && i === selectedIndex ? true : false}\n            onPress={onPress ? () => onPress(i) : () => {}}\n            key={i}\n            style={[\n              styles.button,\n              // FIXME: This is a workaround to the borderColor and borderRadius bug\n              // react-native ref: https://github.com/facebook/react-native/issues/8236\n              i < buttons.length - 1 && {\n                borderRightWidth:\n                  i === 0\n                    ? 0\n                    : (innerBorderStyle && innerBorderStyle.width) || 1,\n                borderRightColor:\n                  (innerBorderStyle && innerBorderStyle.color) || colors.grey4,\n              },\n              i === 1 && {\n                borderLeftWidth:\n                  (innerBorderStyle && innerBorderStyle.width) || 1,\n                borderLeftColor:\n                  (innerBorderStyle && innerBorderStyle.color) || colors.grey4,\n              },\n              i === buttons.length - 1 && {\n                ...lastBorderStyle,\n                borderTopRightRadius: containerRadius,\n                borderBottomRightRadius: containerRadius,\n              },\n              i === 0 && {\n                borderTopLeftRadius: containerRadius,\n                borderBottomLeftRadius: containerRadius,\n              },\n              selectedIndex === i && {\n                backgroundColor: 'white',\n              },\n            ]}\n          >\n            <View\n              style={[\n                styles.textContainer,\n                buttonStyle && buttonStyle,\n                selectedIndex === i &&\n                  selectedButtonStyle &&\n                  selectedButtonStyle,\n              ]}\n            >\n              {button.element ? (\n                <button.element />\n              ) : (\n                <Text\n                  style={[\n                    styles.buttonText,\n                    textStyle && textStyle,\n                    selectedIndex === i && { color: colors.grey1 },\n                    selectedIndex === i && selectedTextStyle,\n                  ]}\n                >\n                  {button}\n                </Text>\n              )}\n            </View>\n          </Component>\n        );\n      })}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1,\n  },\n  textContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    marginBottom: 5,\n    marginTop: 5,\n    borderColor: '#e3e3e3',\n    borderWidth: 1,\n    flexDirection: 'row',\n    borderRadius: 3,\n    overflow: 'hidden',\n    backgroundColor: '#f5f5f5',\n    height: 40,\n  },\n  buttonText: {\n    fontSize: normalize(13),\n    color: colors.grey2,\n    ...Platform.select({\n      ios: {\n        fontWeight: '500',\n      },\n    }),\n  },\n});\n\nButtonGroup.propTypes = {\n  button: PropTypes.object,\n  component: PropTypes.any,\n  onPress: PropTypes.func,\n  buttons: PropTypes.array,\n  containerStyle: ViewPropTypes.style,\n  textStyle: NativeText.propTypes.style,\n  selectedTextStyle: NativeText.propTypes.style,\n  selectedButtonStyle: ViewPropTypes.style,\n  underlayColor: PropTypes.string,\n  selectedIndex: PropTypes.number,\n  activeOpacity: PropTypes.number,\n  onHideUnderlay: PropTypes.func,\n  onShowUnderlay: PropTypes.func,\n  setOpacityTo: PropTypes.any,\n  innerBorderStyle: PropTypes.shape({\n    color: PropTypes.string,\n    width: PropTypes.number,\n  }),\n  lastBorderStyle: PropTypes.oneOfType([\n    ViewPropTypes.style,\n    NativeText.propTypes.style,\n  ]),\n  buttonStyle: ViewPropTypes.style,\n  containerBorderRadius: PropTypes.number,\n  disableSelected: PropTypes.bool,\n};\n\nexport default ButtonGroup;\n"]},"metadata":{},"sourceType":"module"}