{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hassao03/code/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppContainer from \"./src/AppContainer\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport Amplify from '@aws-amplify/core';\nimport awsconfig from \"./aws-exports\";\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport Analytics from '@aws-amplify/analytics';\nAmplify.configure(awsconfig);\nAnalytics.autoTrack('session', {\n  enable: true\n});\n\nvar getActiveRouteName = function getActiveRouteName(state) {\n  var route = state.routes[state.index];\n\n  if (route.state) {\n    return getActiveRouteName(route.state);\n  }\n\n  return route.name;\n};\n\nfunction App() {\n  var _useState = useState(AppState.currentState),\n      _useState2 = _slicedToArray(_useState, 2),\n      appState = _useState2[0],\n      setAppState = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var navigationRef = useRef();\n  var routeNameRef = useRef();\n\n  var loadFonts = function loadFonts() {\n    return _regeneratorRuntime.async(function loadFonts$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread({\n              Roboto: require('native-base/Fonts/Roboto.ttf'),\n              Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf')\n            }, Ionicons.font)));\n\n          case 2:\n            setIsLoading(!isLoading);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    loadFonts();\n    AppState.addEventListener('change', _handleAppStateChange);\n    var currentState = navigationRef.current.getRootState();\n    if (currentState) routeNameRef.current = getActiveRouteName(currentState);\n    return function () {\n      AppState.removeEventListener('change', _handleAppStateChange);\n    };\n  }, []);\n\n  var _handleAppStateChange = function _handleAppStateChange(nextAppState) {\n    if (appState.match(/active|background/) && nextAppState === 'active') {\n      console.log('App has come to the foreground!', routeNameRef.current);\n      Analytics.record({\n        name: 'Navigate',\n        attributes: {\n          background: false\n        }\n      });\n    } else if (appState.match(/active|background/) && nextAppState === 'background') {\n      console.log('App went to the background!');\n      Analytics.record({\n        name: 'Navigate',\n        attributes: {\n          background: true\n        }\n      });\n    }\n\n    setAppState(nextAppState);\n  };\n\n  return React.createElement(NavigationContainer, {\n    ref: navigationRef,\n    onStateChange: function onStateChange(state) {\n      var previousRouteName = routeNameRef.current;\n\n      if (state) {\n        var currentRouteName = getActiveRouteName(state);\n\n        if (!previousRouteName !== currentRouteName && appState === 'active') {\n          console.log('tracking current screen:', currentRouteName);\n          Analytics.record({\n            name: 'Navigate',\n            attributes: {\n              screen: currentRouteName\n            }\n          });\n        }\n\n        routeNameRef.current = currentRouteName;\n      }\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, isLoading ? React.createElement(AppLoading, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 20\n    }\n  }) : React.createElement(AppContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 37\n    }\n  }));\n}\n\nexport default withAuthenticator(App);","map":{"version":3,"sources":["/Users/hassao03/code/App.js"],"names":["React","useState","useEffect","useRef","NavigationContainer","AppContainer","AppLoading","Font","Ionicons","Amplify","awsconfig","withAuthenticator","Analytics","configure","autoTrack","enable","getActiveRouteName","state","route","routes","index","name","App","AppState","currentState","appState","setAppState","isLoading","setIsLoading","navigationRef","routeNameRef","loadFonts","loadAsync","Roboto","require","Roboto_medium","font","addEventListener","_handleAppStateChange","current","getRootState","removeEventListener","nextAppState","match","console","log","record","attributes","background","previousRouteName","currentRouteName","screen"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { AppState } from 'react-native';\nimport { NavigationContainer } from '@react-navigation/native';\nimport AppContainer from './src/AppContainer';\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport Amplify from '@aws-amplify/core';\nimport awsconfig from './aws-exports';\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport Analytics from '@aws-amplify/analytics';\n\nAmplify.configure(awsconfig);\nAnalytics.autoTrack('session', {\n  enable: true,\n});\n\nconst getActiveRouteName = (state) => {\n  const route = state.routes[state.index];\n  if (route.state) {\n    return getActiveRouteName(route.state);\n  }\n  return route.name;\n};\n\nfunction App() {\n  const [appState, setAppState] = useState(AppState.currentState);\n  const [isLoading, setIsLoading] = useState(true);\n  const navigationRef = useRef();\n  const routeNameRef = useRef();\n\n  const loadFonts = async () => {\n    // for native-base\n    await Font.loadAsync({\n      Roboto: require('native-base/Fonts/Roboto.ttf'),\n      Roboto_medium: require('native-base/Fonts/Roboto_medium.ttf'),\n      ...Ionicons.font,\n    });\n    setIsLoading(!isLoading);\n  };\n\n  useEffect(() => {\n    loadFonts();\n\n    // app state\n    AppState.addEventListener('change', _handleAppStateChange);\n\n    // this is for analytics\n    const currentState = navigationRef.current.getRootState();\n    if (currentState) routeNameRef.current = getActiveRouteName(currentState);\n\n    return () => {\n      AppState.removeEventListener('change', _handleAppStateChange);\n    };\n  }, []);\n\n  const _handleAppStateChange = (nextAppState) => {\n    if (appState.match(/active|background/) && nextAppState === 'active') {\n      console.log('App has come to the foreground!', routeNameRef.current);\n      Analytics.record({\n        name: 'Navigate',\n        attributes: {\n          background: false,\n        },\n      });\n    } else if (\n      appState.match(/active|background/) &&\n      nextAppState === 'background'\n    ) {\n      console.log('App went to the background!');\n      Analytics.record({\n        name: 'Navigate',\n        attributes: {\n          background: true,\n        },\n      });\n    }\n    // console.log('from:', appState, 'to:', nextAppState);\n    setAppState(nextAppState);\n  };\n\n  return (\n    <NavigationContainer\n      ref={navigationRef}\n      onStateChange={(state) => {\n        const previousRouteName = routeNameRef.current;\n        if (state) {\n          const currentRouteName = getActiveRouteName(state);\n\n          if (\n            !previousRouteName !== currentRouteName &&\n            appState === 'active'\n          ) {\n            console.log('tracking current screen:', currentRouteName);\n            Analytics.record({\n              name: 'Navigate',\n              attributes: {\n                screen: currentRouteName,\n              },\n            });\n          }\n          routeNameRef.current = currentRouteName;\n        }\n      }}\n    >\n      {isLoading ? <AppLoading /> : <AppContainer />}\n    </NavigationContainer>\n  );\n}\n\nexport default withAuthenticator(App);\n"]},"metadata":{},"sourceType":"module"}