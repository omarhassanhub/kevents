{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/hassao03/code/src/screens/CreateScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Container, Item, Input, Body, Content, Button, Text, Label, Header, Left, Right, Title, Form, View, Image, Thumbnail } from 'native-base';\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\nimport moment from 'moment';\nimport { getCognitoUser } from \"../utils/users\";\nimport { useFormInput } from \"../utils/forms\";\nimport { Storage, API, graphqlOperation } from 'aws-amplify';\nimport uuid from 'uuid/v4';\nimport config from \"../../aws-exports\";\nimport Analytics from '@aws-amplify/analytics';\nimport { createEvent } from \"../graphql/mutations\";\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nexport default function CreateScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      datetime = _useState2[0],\n      setDatetime = _useState2[1];\n\n  var _useState3 = useState('datetime'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      mode = _useState4[0],\n      setMode = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isDatePickerVisible = _useState6[0],\n      setDatePickerVisibility = _useState6[1];\n\n  var showDatePicker = function showDatePicker() {\n    setDatePickerVisibility(true);\n  };\n\n  var hideDatePicker = function hideDatePicker() {\n    setDatePickerVisibility(false);\n  };\n\n  var handleConfirm = function handleConfirm(datetime) {\n    setDatetime(datetime);\n    hideDatePicker();\n  };\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      selectedImage = _React$useState2[0],\n      setSelectedImage = _React$useState2[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            setSelectedImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (selectedImage !== null) {\n    var test = selectedImage.localUri;\n    var lastStr = test.lastIndexOf(\"/\");\n    var str = test.substring(lastStr + 1);\n    var extension = str.split(\".\")[1];\n    var text = str.substring(0, str.lastIndexOf('.'));\n    console.log(extension);\n    console.log(text);\n  }\n\n  var region = config.aws_user_files_s3_bucket_region,\n      bucket = config.aws_user_files_s3_bucket;\n  var user = getCognitoUser();\n  var attributes = user.attributes;\n  var title = useFormInput();\n  var description = useFormInput();\n  var image = useFormInput();\n\n  var createNewEvent = function createNewEvent() {\n    var getImageUri, lastStr, str, extension, fileName, contentType, key, url, _contentType, mimeType, inputData, input, result;\n\n    return _regeneratorRuntime.async(function createNewEvent$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!title.value || !description.value)) {\n              _context2.next = 3;\n              break;\n            }\n\n            alert('Please fill out all the fields');\n            return _context2.abrupt(\"return\");\n\n          case 3:\n            getImageUri = selectedImage.localUri;\n            lastStr = getImageUri.lastIndexOf(\"/\");\n            str = getImageUri.substring(lastStr + 1);\n            extension = str.split(\".\")[1];\n            fileName = str.substring(0, str.lastIndexOf('.'));\n            contentType = 'application/octet-stream';\n            key = \"images/\" + uuid() + fileName + \".\" + extension;\n            url = \"https://\" + bucket + \".s3.\" + region + \".amazonaws.com/public/\" + key;\n            if (extension === 'png' || extension === 'jpg' || extension === 'jpeg' || extension === 'gif') contentType = \"image/\" + extension;\n            _contentType = contentType, mimeType = _contentType.type;\n            inputData = {\n              name: fileName,\n              image: url\n            };\n            input = {\n              input: {\n                startAt: Date.parse(datetime) / 1000,\n                title: title.value,\n                description: description.value,\n                image: url,\n                eventUserId: attributes.sub,\n                status: 'CREATED'\n              }\n            };\n            result = null;\n            _context2.prev = 16;\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(Storage.put(key, fileName, {\n              contentType: \"image/jpg\"\n            }));\n\n          case 19:\n            _context2.next = 21;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createEvent, input)));\n\n          case 21:\n            result = _context2.sent;\n            _context2.next = 27;\n            break;\n\n          case 24:\n            _context2.prev = 24;\n            _context2.t0 = _context2[\"catch\"](16);\n            console.log(_context2.t0);\n\n          case 27:\n            navigation.navigate('Home', {\n              refreshList: true\n            });\n            _context2.next = 30;\n            return _regeneratorRuntime.awrap(Analytics.updateEndpoint({\n              userAttributes: {\n                latestEvent: [title.value]\n              }\n            }).then(function () {\n              console.log('createdEvent');\n              Analytics.record({\n                name: 'createdEvent',\n                attributes: {\n                  username: user.username,\n                  userId: user.attributes.sub\n                }\n              });\n            }));\n\n          case 30:\n            return _context2.abrupt(\"return\", result.data);\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[16, 24]], Promise);\n  };\n\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 5\n    }\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }, React.createElement(Left, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 9\n    }\n  }), React.createElement(Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, \"Home\")), React.createElement(Right, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    transparent: true,\n    onPress: function onPress() {\n      return navigation.goBack();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, \"Close\")))), React.createElement(Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 9\n    }\n  }, React.createElement(Item, {\n    fixedLabel: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 11\n    }\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, \"Title\"), React.createElement(Input, _extends({}, title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }\n  }))), React.createElement(Item, {\n    fixedLabel: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }, \"Description\"), React.createElement(Input, _extends({}, description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }))), React.createElement(Item, {\n    fixedLabel: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 11\n    }\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 13\n    }\n  }, \"Poster\"), React.createElement(Button, {\n    onPress: openImagePickerAsync,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 52\n    }\n  }, \"Select Poster\"))), React.createElement(Item, {\n    fixedLabel: true,\n    last: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, React.createElement(Label, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, \"Date & Time\"), React.createElement(Input, {\n    onFocus: function onFocus() {\n      return showDatePicker();\n    },\n    value: moment(datetime).calendar(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }), React.createElement(DateTimePickerModal, {\n    isVisible: isDatePickerVisible,\n    mode: mode,\n    datetime: datetime,\n    onConfirm: handleConfirm,\n    onCancel: hideDatePicker,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 13\n    }\n  }))), React.createElement(Button, {\n    full: true,\n    onPress: function onPress() {\n      return createNewEvent();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, \"Save\"))));\n}","map":{"version":3,"sources":["/Users/hassao03/code/src/screens/CreateScreen.js"],"names":["React","useState","useEffect","Container","Item","Input","Body","Content","Button","Text","Label","Header","Left","Right","Title","Form","View","Image","Thumbnail","DateTimePickerModal","moment","getCognitoUser","useFormInput","Storage","API","graphqlOperation","uuid","config","Analytics","createEvent","ImagePicker","Permissions","Constants","CreateScreen","navigation","datetime","setDatetime","mode","setMode","isDatePickerVisible","setDatePickerVisibility","showDatePicker","hideDatePicker","handleConfirm","selectedImage","setSelectedImage","openImagePickerAsync","requestCameraRollPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","localUri","uri","test","lastStr","lastIndexOf","str","substring","extension","split","text","console","log","region","aws_user_files_s3_bucket_region","bucket","aws_user_files_s3_bucket","user","attributes","title","description","image","createNewEvent","value","getImageUri","fileName","contentType","key","url","mimeType","type","inputData","name","input","startAt","Date","parse","eventUserId","sub","status","result","put","graphql","navigate","refreshList","updateEndpoint","userAttributes","latestEvent","then","record","username","userId","data","goBack","calendar"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Item,\n  Input,\n  Body,\n  Content,\n  Button,\n  Text,\n  Label,\n  Header,\n  Left,\n  Right,\n  Title,\n  Form,\n  View,\n  Image, Thumbnail,\n} from 'native-base';\n\nimport DateTimePickerModal from 'react-native-modal-datetime-picker';\n\nimport moment from 'moment';\n\nimport { getCognitoUser } from '../utils/users';\nimport { useFormInput } from '../utils/forms';\n\nimport { Storage, API, graphqlOperation } from 'aws-amplify';\nimport uuid from 'uuid/v4'\nimport config from '../../aws-exports'\nimport Analytics from '@aws-amplify/analytics';\nimport { createEvent } from '../graphql/mutations';\nimport * as ImagePicker from 'expo-image-picker';\nimport * as Permissions from 'expo-permissions';\nimport Constants from 'expo-constants';\nexport default function CreateScreen({ navigation }) {\n\n  const [datetime, setDatetime] = useState();\n  const [mode, setMode] = useState('datetime');\n  const [isDatePickerVisible, setDatePickerVisibility] = useState(false);\n\n\n\n  const showDatePicker = () => {\n    setDatePickerVisibility(true);\n  };\n\n  const hideDatePicker = () => {\n    setDatePickerVisibility(false);\n  };\n\n  const handleConfirm = (datetime) => {\n    setDatetime(datetime);\n    hideDatePicker();\n  };\n\n\n  let [selectedImage, setSelectedImage] = React.useState(null);\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestCameraRollPermissionsAsync();\n\n    if (permissionResult.granted === false) {\n      alert('Permission to access camera roll is required!');\n      return;\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync();\n    if (pickerResult.cancelled === true) {\n      return;\n    }\n\n    setSelectedImage({ localUri: pickerResult.uri });\n\n  };\n\n  if (selectedImage !== null) {\n    // console.log(\"******\")\n    // console.log(selectedImage.localUri)\n    // alert(selectedImage.localUri)\n    const test = selectedImage.localUri;\n    const lastStr = test.lastIndexOf(\"/\");\n    const str = test.substring(lastStr + 1);\n    const extension = str.split(\".\")[1]\n    const text = str.substring(0, str.lastIndexOf('.'));\n    // console.log(\"+++++\");\n    // console.log(str);\n    console.log(extension);\n    console.log(text);\n  }\n\n  const {\n    aws_user_files_s3_bucket_region: region,\n    aws_user_files_s3_bucket: bucket\n  } = config\n  // upload the image to S3 and then save it in the GraphQL API\n  // async function createProduct() {\n  //\n  //   if (selectedImage) {\n  //     const getImageUri = selectedImage.localUri;\n  //     const lastStr = getImageUri.lastIndexOf(\"/\");\n  //     const str = getImageUri.substring(lastStr + 1);\n  //     const extension = str.split(\".\")[1]\n  //     const fileName = str.substring(0, str.lastIndexOf('.'));\n  //     // const extension = x.split(\".\")[1]\n  //     const { type: mimeType } = fileName\n  //     const key = `images/${uuid()}${fileName}.${extension}`\n  //     const url = `https://${bucket}.s3.${region}.amazonaws.com/public/${key}`\n  //\n  //     const inputData = { name: fileName , image: url }\n  //\n  //     try {\n  //       await Storage.put(key, fileName, {\n  //         contentType: mimeType\n  //       })\n  //       await API.graphql(graphqlOperation(CreateProduct, { input: inputData }))\n  //     } catch (err) {\n  //       console.log('error: ', err)\n  //     }\n  //   }\n  // }\n\n\n  let user = getCognitoUser();\n  const { attributes } = user;\n\n  let title = useFormInput();\n  let description = useFormInput();\n  let image = useFormInput();\n\n  const createNewEvent = async () => {\n    if (!title.value || !description.value) {\n      alert('Please fill out all the fields');\n      return;\n    }\n    // if (selectedImage) {\n      const getImageUri = selectedImage.localUri;\n      const lastStr = getImageUri.lastIndexOf(\"/\");\n      const str = getImageUri.substring(lastStr + 1);\n      const extension = str.split(\".\")[1]\n      const fileName = str.substring(0, str.lastIndexOf('.'));\n      // const extension = x.split(\".\")[1]\n\n      let contentType = 'application/octet-stream';\n\n\n      const key = `images/${uuid()}${fileName}.${extension}`\n      const url = `https://${bucket}.s3.${region}.amazonaws.com/public/${key}`\n\n      if (extension === 'png' || extension === 'jpg' || extension === 'jpeg' || extension === 'gif')\n          contentType = \"image/\" + extension;\n      const { type: mimeType } = contentType\n      const inputData = { name: fileName , image: url }\n\n      // try {\n      //   await Storage.put(key, fileName, {\n      //     contentType: mimeType\n      //   })\n      //   await API.graphql(graphqlOperation(CreateProduct, { input: inputData }))\n      // } catch (err) {\n      //   console.log('error: ', err)\n      // }\n    // }\n    const input = {\n      input: {\n        startAt: Date.parse(datetime) / 1000,\n        title: title.value,\n        description: description.value,\n        image: url,\n        eventUserId: attributes.sub,\n        status: 'CREATED',\n      },\n    };\n\n    let result = null;\n    try {\n        await Storage.put(key, fileName, {\n          contentType: \"image/jpg\"\n        })\n      result = await API.graphql(graphqlOperation(createEvent, input));\n    } catch (e) {\n      console.log(e);\n    }\n\n    navigation.navigate('Home', { refreshList: true });\n\n    await Analytics.updateEndpoint({\n      userAttributes: {\n        latestEvent: [title.value],\n      },\n    }).then(() => {\n      console.log('createdEvent');\n      Analytics.record({\n        name: 'createdEvent',\n        attributes: {\n          username: user.username,\n          userId: user.attributes.sub,\n        },\n      });\n    });\n\n    return result.data;\n  };\n\n\n  return (\n    <Container>\n      <Header>\n        <Left />\n        <Body>\n          <Title>Home</Title>\n        </Body>\n        <Right>\n          <Button transparent onPress={() => navigation.goBack()}>\n            <Text>Close</Text>\n          </Button>\n        </Right>\n      </Header>\n      <Content>\n        <Form>\n          <Item fixedLabel>\n            <Label>Title</Label>\n            <Input {...title} />\n          </Item>\n          <Item fixedLabel>\n            <Label>Description</Label>\n            <Input {...description} />\n          </Item>\n          <Item fixedLabel>\n            <Label>Poster</Label>\n            {/*<Input {...image} />*/}\n            <Button onPress={openImagePickerAsync}><Text>Select Poster</Text></Button>\n\n\n          </Item>\n          <Item fixedLabel last>\n            <Label>Date & Time</Label>\n            <Input\n              onFocus={() => showDatePicker()}\n              value={moment(datetime).calendar()}\n            />\n            <DateTimePickerModal\n              isVisible={isDatePickerVisible}\n              mode={mode}\n              datetime={datetime}\n              onConfirm={handleConfirm}\n              onCancel={hideDatePicker}\n            />\n          </Item>\n        </Form>\n\n        <Button full onPress={() => createNewEvent()}>\n          <Text>Save</Text>\n        </Button>\n      </Content>\n    </Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}