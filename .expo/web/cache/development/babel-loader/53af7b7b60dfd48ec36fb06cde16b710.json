{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport Analytics from '@aws-amplify/analytics';\nimport { createUser, updateUser } from \"../graphql/mutations\";\n\nfunction getCognitoUser() {\n  var bypass = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      user = _useState2[0],\n      setUser = _useState2[1];\n\n  var updateOnce = true;\n\n  var fetchUser = function fetchUser() {\n    var cognitoUser;\n    return _regeneratorRuntime.async(function fetchUser$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser({\n              bypassCache: bypass\n            }));\n\n          case 2:\n            cognitoUser = _context.sent;\n            setUser(cognitoUser);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    if (updateOnce) fetchUser();\n  }, [updateOnce]);\n  return user;\n}\n\nfunction updateDatabaseUser(username, attributes) {\n  var _pinpointResult$Messa;\n\n  var firsttime,\n      cognitoUser,\n      id,\n      email,\n      phone_number,\n      name,\n      result,\n      input,\n      isNewUser,\n      pinpointResult,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function updateDatabaseUser$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          firsttime = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : true;\n\n          if (!(!username || !attributes)) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n        case 5:\n          cognitoUser = _context2.sent;\n          id = attributes.sub;\n          email = attributes.email;\n          phone_number = attributes.phone_number;\n          name = attributes.given_name + \" \" + attributes.family_name;\n          result = null;\n\n          if (firsttime) {\n            _context2.next = 13;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 13:\n          input = {\n            input: {\n              id: id,\n              email: email,\n              username: username,\n              name: name,\n              phone_number: phone_number\n            }\n          };\n          isNewUser = false;\n          _context2.prev = 15;\n          _context2.next = 18;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createUser, input)));\n\n        case 18:\n          result = _context2.sent;\n          isNewUser = true;\n          console.log('new user!');\n          _context2.next = 29;\n          break;\n\n        case 23:\n          _context2.prev = 23;\n          _context2.t0 = _context2[\"catch\"](15);\n          _context2.next = 27;\n          return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(updateUser, input)));\n\n        case 27:\n          result = _context2.sent;\n          console.log('existing user!');\n\n        case 29:\n          _context2.next = 31;\n          return _regeneratorRuntime.awrap(updateEndpoint(attributes, 'email'));\n\n        case 31:\n          pinpointResult = _context2.sent;\n\n          if (pinpointResult && ((_pinpointResult$Messa = pinpointResult.MessageBody) == null ? void 0 : _pinpointResult$Messa.Message) === 'Accepted') {\n            if (isNewUser) {\n              console.log('NewUser');\n              Analytics.record({\n                name: 'NewUser'\n              });\n            }\n\n            console.log('updateEndpoint');\n            Analytics.record({\n              name: 'updateEndpoint'\n            });\n          }\n\n          return _context2.abrupt(\"return\", result.data);\n\n        case 34:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[15, 23]], Promise);\n}\n\nfunction updateEndpoint(attributes) {\n  var type,\n      isSandbox,\n      deviceToken,\n      result,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function updateEndpoint$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          type = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : 'email';\n          isSandbox = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : true;\n          deviceToken = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : '';\n          result = null;\n          _context3.t0 = type;\n          _context3.next = _context3.t0 === 'email' ? 7 : 11;\n          break;\n\n        case 7:\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Analytics.updateEndpoint({\n            channelType: 'EMAIL',\n            address: attributes.email,\n            userId: attributes.sub,\n            optOut: 'NONE',\n            userAttributes: {\n              email: [attributes.email],\n              familyName: [attributes.family_name],\n              givenName: [attributes.given_name],\n              phoneNumber: [attributes.phone_number]\n            }\n          }));\n\n        case 9:\n          result = _context3.sent;\n          return _context3.abrupt(\"break\", 13);\n\n        case 11:\n          console.log('wrong channel ', type, result);\n          return _context3.abrupt(\"break\", 13);\n\n        case 13:\n          return _context3.abrupt(\"return\", result);\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexports.getCognitoUser = getCognitoUser;\nexports.updateDatabaseUser = updateDatabaseUser;","map":{"version":3,"sources":["/Users/hassao03/code/src/utils/users.js"],"names":["useEffect","useState","Auth","API","graphqlOperation","Analytics","createUser","updateUser","getCognitoUser","bypass","user","setUser","updateOnce","fetchUser","currentAuthenticatedUser","bypassCache","cognitoUser","updateDatabaseUser","username","attributes","firsttime","id","sub","email","phone_number","name","given_name","family_name","result","input","isNewUser","graphql","console","log","updateEndpoint","pinpointResult","MessageBody","Message","record","data","type","isSandbox","deviceToken","channelType","address","userId","optOut","userAttributes","familyName","givenName","phoneNumber","exports"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport Analytics from '@aws-amplify/analytics';\nimport { createUser, updateUser } from '../graphql/mutations';\n\nfunction getCognitoUser(bypass = false) {\n  let [user, setUser] = useState([]);\n  let updateOnce = true;\n\n  const fetchUser = async () => {\n    const cognitoUser = await Auth.currentAuthenticatedUser({\n      bypassCache: bypass,\n    });\n    // console.log(cognitoUser);\n    setUser(cognitoUser);\n  };\n\n  useEffect(() => {\n    if (updateOnce) fetchUser();\n  }, [updateOnce]);\n\n  return user;\n}\n\nasync function updateDatabaseUser(username, attributes, firsttime = true) {\n  if (!username || !attributes) return null;\n\n  const cognitoUser = await Auth.currentAuthenticatedUser();\n  const id = attributes.sub;\n  const email = attributes.email;\n  const phone_number = attributes.phone_number;\n  const name = `${attributes.given_name} ${attributes.family_name}`;\n  let result = null;\n\n  if (!firsttime) return null;\n\n  const input = {\n    input: {\n      id,\n      email,\n      username,\n      name,\n      phone_number,\n    },\n  };\n\n  let isNewUser = false;\n\n  try {\n    result = await API.graphql(graphqlOperation(createUser, input));\n    isNewUser = true;\n    console.log('new user!');\n  } catch (e) {\n    result = await API.graphql(graphqlOperation(updateUser, input));\n    console.log('existing user!');\n  }\n\n  const pinpointResult = await updateEndpoint(attributes, 'email');\n  // if (isNewUser || email !== cognitoUser.attributes.email) {\n  // console.log('updateEndpoint', email, attributes);\n  // }\n  // if (isNewUser || phone_number !== cognitoUser.attributes.phone_number) {\n  // console.log('updateEndpoint', phone_number, attributes);\n  // pinpointResult = updateEndpoint(attributes, 'phone_number');\n  // }\n\n  if (pinpointResult && pinpointResult.MessageBody?.Message === 'Accepted') {\n    if (isNewUser) {\n      console.log('NewUser');\n      Analytics.record({\n        name: 'NewUser',\n      });\n    }\n    console.log('updateEndpoint');\n    Analytics.record({\n      name: 'updateEndpoint',\n    });\n  }\n\n  return result.data;\n}\n\nasync function updateEndpoint(\n  attributes,\n  type = 'email',\n  isSandbox = true,\n  deviceToken = ''\n) {\n  let result = null;\n  switch (type) {\n    case 'email':\n      result = await Analytics.updateEndpoint({\n        channelType: 'EMAIL',\n        address: attributes.email,\n        userId: attributes.sub,\n        optOut: 'NONE',\n        userAttributes: {\n          email: [attributes.email],\n          familyName: [attributes.family_name],\n          givenName: [attributes.given_name],\n          phoneNumber: [attributes.phone_number],\n        },\n      });\n      break;\n    // case 'phone_number':\n    //   result = await Analytics.updateEndpoint({\n    //     ChannelType: 'SMS',\n    //     Address: attributes.phone_number,\n    //     UserId: attributes.sub,\n    //     OptOut: 'NONE',\n    //   });\n    //   break;\n    // case 'push':\n    //   let channelType = 'APNS';\n    //   if (isSandbox) {\n    //     channelType = 'APNS_SANDBOX';\n    //   }\n\n    //   result = await Analytics.updateEndpoint({\n    //     ChannelType: channelType,\n    //     Address: deviceToken,\n    //     UserId: attributes.sub,\n    //     OptOut: 'NONE',\n    //   });\n    //   break;\n    default:\n      console.log('wrong channel ', type, result);\n      break;\n  }\n\n  return result;\n}\n\nexports.getCognitoUser = getCognitoUser;\nexports.updateDatabaseUser = updateDatabaseUser;\n"]},"metadata":{},"sourceType":"module"}