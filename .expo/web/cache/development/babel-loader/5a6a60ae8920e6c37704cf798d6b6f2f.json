{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/hassao03/code/node_modules/react-native-elements/src/form/FormInput.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport NativeText from \"react-native-web/dist/exports/Text\";\nimport colors from \"../config/colors\";\nimport normalize from \"../helpers/normalizeText\";\nimport ViewPropTypes from \"../config/ViewPropTypes\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar FormInput = function (_Component) {\n  _inherits(FormInput, _Component);\n\n  var _super = _createSuper(FormInput);\n\n  function FormInput(props) {\n    var _this;\n\n    _classCallCheck(this, FormInput);\n\n    _this = _super.call(this, props);\n\n    _this.getRef = function () {\n      return _this.input || _this.refs[_this.props.textInputRef];\n    };\n\n    _this.getRefHandler = function () {\n      if (_this.props.textInputRef) {\n        if (typeof _this.props.textInputRef === 'function') {\n          return function (input) {\n            _this.input = input;\n\n            _this.props.textInputRef(input);\n          };\n        } else {\n          return _this.props.textInputRef;\n        }\n      } else {\n        return function (input) {\n          return _this.input = input;\n        };\n      }\n    };\n\n    _this.shake = _this.shake.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(FormInput, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.shakeAnimationValue = new Animated.Value(0);\n      this.props.shake && this.shake();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      nextProps.shake && this.props.shake !== nextProps.shake && this.shake();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.getRef() && this.getRef().focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.getRef() && this.getRef().blur();\n    }\n  }, {\n    key: \"clearText\",\n    value: function clearText() {\n      this.getRef() && this.getRef().clear();\n    }\n  }, {\n    key: \"shake\",\n    value: function shake() {\n      var shakeAnimationValue = this.shakeAnimationValue;\n      shakeAnimationValue.setValue(0);\n      Animated.timing(shakeAnimationValue, {\n        duration: 375,\n        toValue: 3,\n        ease: Easing.bounce\n      }).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          containerStyle = _this$props.containerStyle,\n          inputStyle = _this$props.inputStyle,\n          containerRef = _this$props.containerRef,\n          normalizeFontSize = _this$props.normalizeFontSize,\n          attributes = _objectWithoutProperties(_this$props, [\"containerStyle\", \"inputStyle\", \"containerRef\", \"normalizeFontSize\"]);\n\n      var translateX = this.shakeAnimationValue.interpolate({\n        inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],\n        outputRange: [0, -15, 0, 15, 0, -15, 0]\n      });\n      return React.createElement(Animated.View, {\n        ref: containerRef,\n        style: [styles.container, containerStyle && containerStyle, {\n          transform: [{\n            translateX: translateX\n          }]\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 7\n        }\n      }, React.createElement(TextInput, _extends({}, attributes, {\n        ref: this.getRefHandler(),\n        style: [styles.input, {\n          fontSize: normalizeFontSize ? normalize(14) : 14\n        }, inputStyle && inputStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      })));\n    }\n  }]);\n\n  return FormInput;\n}(Component);\n\nFormInput.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  inputStyle: NativeText.propTypes.style,\n  textInputRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  containerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  normalizeFontSize: PropTypes.bool,\n  shake: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.object, PropTypes.number, PropTypes.array])\n};\nFormInput.defaultProps = {\n  normalizeFontSize: true\n};\nvar styles = StyleSheet.create({\n  container: _objectSpread({\n    marginLeft: 15,\n    marginRight: 15\n  }, Platform.select({\n    ios: {\n      borderBottomColor: colors.grey4,\n      borderBottomWidth: 1,\n      marginLeft: 20,\n      marginRight: 20\n    }\n  })),\n  input: _objectSpread({}, Platform.select({\n    android: {\n      minHeight: 46,\n      width: width - 30\n    },\n    ios: {\n      minHeight: 36,\n      width: width\n    }\n  }), {\n    color: colors.grey3\n  })\n});\nexport default FormInput;","map":{"version":3,"sources":["/Users/hassao03/code/node_modules/react-native-elements/src/form/FormInput.js"],"names":["PropTypes","React","Component","colors","normalize","ViewPropTypes","Dimensions","get","width","FormInput","props","getRef","input","refs","textInputRef","getRefHandler","shake","bind","shakeAnimationValue","Animated","Value","nextProps","focus","blur","clear","setValue","timing","duration","toValue","ease","Easing","bounce","start","containerStyle","inputStyle","containerRef","normalizeFontSize","attributes","translateX","interpolate","inputRange","outputRange","styles","container","transform","fontSize","propTypes","style","NativeText","oneOfType","string","func","bool","object","number","array","defaultProps","StyleSheet","create","marginLeft","marginRight","Platform","select","ios","borderBottomColor","grey4","borderBottomWidth","android","minHeight","color","grey3"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  Animated,\n  Easing,\n  TextInput,\n  StyleSheet,\n  Platform,\n  Dimensions,\n  Text as NativeText,\n} from 'react-native';\nimport colors from '../config/colors';\nimport normalize from '../helpers/normalizeText';\nimport ViewPropTypes from '../config/ViewPropTypes';\n\nconst { width } = Dimensions.get('window');\n\nclass FormInput extends Component {\n  constructor(props) {\n    super(props);\n    this.shake = this.shake.bind(this);\n  }\n\n  componentWillMount() {\n    this.shakeAnimationValue = new Animated.Value(0);\n    this.props.shake && this.shake();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    nextProps.shake && this.props.shake !== nextProps.shake && this.shake();\n  }\n\n  getRef = () => {\n    return this.input || this.refs[this.props.textInputRef];\n  };\n\n  getRefHandler = () => {\n    if (this.props.textInputRef) {\n      if (typeof this.props.textInputRef === 'function') {\n        return input => {\n          this.input = input;\n          this.props.textInputRef(input);\n        };\n      } else {\n        return this.props.textInputRef;\n      }\n    } else {\n      return input => (this.input = input);\n    }\n  };\n\n  focus() {\n    this.getRef() && this.getRef().focus();\n  }\n\n  blur() {\n    this.getRef() && this.getRef().blur();\n  }\n\n  clearText() {\n    this.getRef() && this.getRef().clear();\n  }\n\n  shake() {\n    const { shakeAnimationValue } = this;\n    shakeAnimationValue.setValue(0);\n    Animated.timing(shakeAnimationValue, {\n      duration: 375,\n      toValue: 3,\n      ease: Easing.bounce,\n    }).start();\n  }\n\n  render() {\n    const {\n      containerStyle,\n      inputStyle,\n      containerRef,\n      normalizeFontSize,\n      ...attributes\n    } = this.props;\n    const translateX = this.shakeAnimationValue.interpolate({\n      inputRange: [0, 0.5, 1, 1.5, 2, 2.5, 3],\n      outputRange: [0, -15, 0, 15, 0, -15, 0],\n    });\n    return (\n      <Animated.View\n        ref={containerRef}\n        style={[\n          styles.container,\n          containerStyle && containerStyle,\n          {\n            transform: [{ translateX }],\n          },\n        ]}\n      >\n        <TextInput\n          {...attributes}\n          ref={this.getRefHandler()}\n          style={[\n            styles.input,\n            { fontSize: normalizeFontSize ? normalize(14) : 14 },\n            inputStyle && inputStyle,\n          ]}\n        />\n      </Animated.View>\n    );\n  }\n}\n\nFormInput.propTypes = {\n  containerStyle: ViewPropTypes.style,\n  inputStyle: NativeText.propTypes.style,\n  // Deprecated\n  textInputRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  // Deprecated\n  containerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  normalizeFontSize: PropTypes.bool,\n  shake: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n    PropTypes.object,\n    PropTypes.number,\n    PropTypes.array,\n  ]),\n};\n\nFormInput.defaultProps = {\n  normalizeFontSize: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginLeft: 15,\n    marginRight: 15,\n    ...Platform.select({\n      ios: {\n        borderBottomColor: colors.grey4,\n        borderBottomWidth: 1,\n        marginLeft: 20,\n        marginRight: 20,\n      },\n    }),\n  },\n  input: {\n    ...Platform.select({\n      android: {\n        minHeight: 46,\n        width: width - 30,\n      },\n      ios: {\n        minHeight: 36,\n        width: width,\n      },\n    }),\n    // breaks tests - fix before release\n    // Invariant Violation: Invalid undefined `width` of type `string`\n    // supplied to `StyleSheet input`, expected `number`.\n    // width: '100%',\n    color: colors.grey3,\n  },\n});\n\nexport default FormInput;\n"]},"metadata":{},"sourceType":"module"}